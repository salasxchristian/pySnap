name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
    tags: ['v*']
  pull_request:
    branches: [master, develop]
  workflow_dispatch:  # Manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DISPLAY: ':99.0'
      QT_SELECT: 'qt6'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'
          cache: 'pip'
      
      - name: Setup xvfb (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0 libxcb-shape0 libglib2.0-0 libgl1-mesa-dev
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 &
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Tests
        run: python run_tests.py
      
      - name: Validate Version
        run: |
          VERSION=$(python -c "from version import __version__; print(__version__)")
          echo "Current version: $VERSION"

  build-windows:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'
          cache: 'pip'
      
      - name: Get Version
        id: version
        run: |
          $VERSION = python -c "from version import __version__; print(__version__)"
          echo "version=$VERSION" >> $env:GITHUB_OUTPUT
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Run Tests
        run: python run_tests.py
      
      - name: Build Windows EXE
        run: |
          pyinstaller --clean `
            --windowed `
            --name "pySnap" `
            --icon=icons/app_icon.ico `
            --add-data "icons;icons" `
            --add-data "version.py;." `
            --add-data "snapshot_filters.py;." `
            vmware_snapshot_manager.py

      - name: Create Windows ZIP
        run: |
          cd dist
          Compress-Archive -Path "pySnap" -DestinationPath "pySnap-v${{ steps.version.outputs.version }}-Windows.zip"

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pySnap-v${{ steps.version.outputs.version }}-Windows
          path: dist/pySnap-v${{ steps.version.outputs.version }}-Windows.zip

  build-macos:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'
          cache: 'pip'
      
      - name: Get Version
        id: version
        run: |
          VERSION=$(python -c "from version import __version__; print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Run Tests
        run: python run_tests.py
      
      - name: Build macOS App
        run: pyinstaller pysnap_mac.spec

      - name: Create macOS ZIP
        run: |
          cd dist
          zip -r "pySnap-v${{ steps.version.outputs.version }}-macOS.zip" "pySnap.app"

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pySnap-v${{ steps.version.outputs.version }}-macOS
          path: dist/pySnap-v${{ steps.version.outputs.version }}-macOS.zip

  release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'
      
      - name: Get Version
        id: version
        run: |
          VERSION=$(python -c "from version import __version__; print(__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Download Windows Build
        uses: actions/download-artifact@v4
        with:
          name: pySnap-v${{ steps.version.outputs.version }}-Windows
          path: dist/windows
      
      - name: Download macOS Build
        uses: actions/download-artifact@v4
        with:
          name: pySnap-v${{ steps.version.outputs.version }}-macOS
          path: dist/macos
      
      - name: Debug - List downloaded files
        run: |
          echo "Windows files:"
          ls -la dist/windows/
          echo "macOS files:"
          ls -la dist/macos/
          echo "File sizes:"
          du -h dist/windows/* dist/macos/*
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: pySnap v${{ steps.version.outputs.version }}
          tag_name: ${{ github.ref_name }}
          body: |
            pySnap - VMware Snapshot Manager v${{ steps.version.outputs.version }}
            
            ## Downloads
            - Windows: pySnap-v${{ steps.version.outputs.version }}-Windows.zip
            - macOS: pySnap-v${{ steps.version.outputs.version }}-macOS.zip
            
            ## Installation
            Windows:
            1. Download and extract the ZIP file
            2. Run pySnap.exe from the extracted folder
            
            macOS:
            1. Download and extract the ZIP file
            2. Move pySnap.app to Applications (optional)
            3. Right-click the app and select "Open" (first time only)
            
            For detailed instructions, see the [README.md](README.md)
          files: |
            dist/windows/pySnap-v${{ steps.version.outputs.version }}-Windows.zip
            dist/macos/pySnap-v${{ steps.version.outputs.version }}-macOS.zip
          fail_on_unmatched_files: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
